# -*- coding: utf-8 -*-
"""Bajaj_Mini Hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DbEd_ibyAYRca24zYDV1Euob8NHqfLFj
"""

import pandas as pd
data=pd.read_json("/content/DataEngineeringQ2.json")
data.head()

"""Your final dataframe should have these columns, Export this dataframe in a csv file with no index and use'~'
separator:-
1. appointmentId
2. fullName
3. phoneNumber
4. isValidMobile
5. phoneNumberHash
6. gender
7. DOB
8. Age
9. noOfMedicines
10. noOfActiveMedicines
11. noOfInActiveMedicines
12. MedicineNames
"""

import json
from datetime import datetime
import hashlib

with open('/content/DataEngineeringQ2.json') as f:
    data=json.load(f)

def agecal(dob):
    if dob is None:
        return None
    today=datetime.now()
    birth_date=datetime.strptime(dob, '%Y-%m-%dT%H:%M:%S.%fZ')
    age=today.year-birth_date.year
    if(today.month<birth_date.month or ((today.month==birth_date.month) and (today.day<birth_date.day))):
        age-=1
    return age

def validphone(phone_number):
    if phone_number.startswith('+91') or phone_number.startswith('91'):
        number=phone_number[-10:]
        if (number.isnumeric() and 6000000000<=int(number)<=9999999999):
            return True
    return False

def hashgen(phone_number):
    return hashlib.sha256(phone_number.encode()).hexdigest()

appointments=[]
for record in data:
    patient_details=record['patientDetails']
    gender=patient_details.get('gender', None)
    gender_transformed='male' if gender=='M' else 'female' if gender=='F' else 'others'
    
    fullName=patient_details['firstName']+' '+patient_details['lastName']
    phoneNumber=record['phoneNumber']
    
    isValidMobile=validphone(phoneNumber)
    phoneNumberHash=hashgen(phoneNumber) if isValidMobile else None
    
    age=agecal(patient_details.get('birthDate', None))
    
    medicines=record['consultationData']['medicines']
    noOfMedicines=len(medicines)
    noOfActiveMedicines=sum(1 for med in medicines if med['isActive'])
    noOfInactiveMedicines=noOfMedicines-noOfActiveMedicines
    
    activeMedicineNames=", ".join(med['medicineName'] for med in medicines if med['isActive'])
    
    appointment={
        'appointmentId': record['appointmentId'],
        'fullName': fullName,
        'phoneNumber': phoneNumber,
        'isValidMobile': isValidMobile,
        'phoneNumberHash': phoneNumberHash,
        'gender': gender_transformed,
        'DOB': patient_details.get('birthDate', None),
        'Age': age,
        'noOfMedicines': noOfMedicines,
        'noOfActiveMedicines': noOfActiveMedicines,
        'noOfInActiveMedicines': noOfInactiveMedicines,
        'MedicineNames': activeMedicineNames
    }
    appointments.append(appointment)

df=pd.DataFrame(appointments)
columns=[
    'appointmentId',
    'fullName',
    'phoneNumber',
    'isValidMobile',
    'phoneNumberHash',
    'gender',
    'DOB',
    'Age',
    'noOfMedicines',
    'noOfActiveMedicines',
    'noOfInActiveMedicines',
    'MedicineNames'
]
df=df[columns]
df.to_csv('Answer.csv', sep='~', index=False)

"""1. Export the aggregated data in json file format
Keys:
1. Age
2. gender
3. validPhoneNumbers (no of valid mobile numbers)
4. appointments (no of appointments)
5. medicines (no of medicines prescribed)
6. activeMedicines (no of active medicines prescribed)
2. Plot a pie chart for number of appointments against gender
"""

import json
import matplotlib.pyplot as plt

aggregated_data={
    'Age': df['Age'].mean(),
    'gender': df['gender'].value_counts().to_dict(),
    'validPhoneNumbers': df['isValidMobile'].sum(),
    'appointments': len(df),
    'medicines': df['noOfMedicines'].sum(),
    'activeMedicines': df['noOfActiveMedicines'].sum()
}

aggregated_data['Age']=int(aggregated_data['Age'])
aggregated_data['validPhoneNumbers']=int(aggregated_data['validPhoneNumbers'])
aggregated_data['appointments']=int(aggregated_data['appointments'])
aggregated_data['medicines']=int(aggregated_data['medicines'])
aggregated_data['activeMedicines']=int(aggregated_data['activeMedicines'])

with open('aggregated_data.json', 'w') as f:
    json.dump(aggregated_data, f, indent=4)

gender_counts=df['gender'].value_counts()
labels=gender_counts.index
values=gender_counts.values

plt.pie(values,labels=labels,autopct='%1.5f%%')
plt.title('Number of Appointments by Gender')
plt.show()